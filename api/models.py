"""Models of data used in the api."""
from api import constants
from api.db import get_db
from api.utils import get_date_or_none


class CallRecord:
    """Model to store phone call records."""

    TABLE_NAME = 'phone_call'

    def __init__(
        self, record_id, record_type, record_timestamp, call_identifier, origin_number=None, destination_number=None
    ):
        """Constructor used to populate the data of the object."""
        self.record_id = record_id
        self.record_type = record_type
        self.record_timestamp = get_date_or_none(record_timestamp)
        self.call_identifier = call_identifier
        self.origin_number = origin_number
        self.destination_number = destination_number

    def validate(self):
        """
        Validate if the mandatory fields are present and are valid.

        Returns:
            (list): list of error messages generated by the validation.
        """
        error_messages = []

        if not self.record_id:
            error_messages.append(constants.MESSAGE_MANDATORY_FIELD.format('record_id'))

        if not self.record_type:
            error_messages.append(constants.MESSAGE_MANDATORY_FIELD.format('record_type'))
        elif self.record_type not in constants.RECORD_TYPE_OPTIONS:
            error_messages.append(constants.MESSAGE_INVALID_FIELD.format('record_type'))

        if not self.record_timestamp:
            error_messages.append(constants.MESSAGE_INVALID_FIELD.format('record_timestamp'))

        if not self.call_identifier:
            error_messages.append(constants.MESSAGE_MANDATORY_FIELD.format('call_identifier'))

        if self.record_type and self.record_type == constants.RECORD_TYPE_START:
            if not self.origin_number:
                error_messages.append(constants.MESSAGE_MANDATORY_FIELD.format('origin_number'))
            elif not self.is_valid_phone_number(self.origin_number):
                error_messages.append(constants.MESSAGE_INVALID_FIELD.format('origin_number'))

            if not self.destination_number:
                error_messages.append(constants.MESSAGE_MANDATORY_FIELD.format('destination_number'))
            elif not self.is_valid_phone_number(self.destination_number):
                error_messages.append(constants.MESSAGE_INVALID_FIELD.format('destination_number'))

        if self.call_id and self.record_type and self.exists_call_id():
            error_messages.append(constants.MESSAGE_DUPLICATED_CALL_ID.format(self.call_id, self.record_type))

        return error_messages

    def is_valid_phone_number(self, number):
        """Check if the phone number is in the valid format."""
        if not number:
            return False

        return 10 <= len(str(number)) <= 11

    def exists_call_id(self):
        """Check if already exists a record with the call_id and record_type."""
        if not self.call_id or not self.record_type:
            return False

        sql_command = 'SELECT 1 FROM {} WHERE call_id = {} AND record_type = ?'.format(
            self.table_name, self.record_id, self.call_id
        )
        if self.record_id:
            sql_command += ' AND record_id <> {}'.format(self.record_id)
        cursor = get_db.cursor
        result = cursor.execute(sql_command, self.record_type)

        return result.fetchone() is not None

    def save(self):
        """Save the Call Record data on the database."""
        db = get_db()
        cursor = db.cursor()

        exists_id = check_exists_id(cursor, self.TABLE_NAME, 'record_id', self.record_id)

        if exists_id:
            update = 'record_type = ?, record_timestamp = ?, call_identifier = ?'
            if self.record_type == constants.RECORD_TYPE_START:
                update += ', origin_number = ?, destination_number = ?'

            sql_command = 'UPDATE {} SET {} WHERE record_id = ?'.format(self.TABLE_NAME, update)
        else:
            fields = ['record_type', 'record_timestamp', 'call_identifier']
            if self.record_type == constants.RECORD_TYPE_START:
                fields.append('origin_number')
                fields.append('destination_number')
            if self.record_id:
                fields.append('record_id')

            sql_command = 'INSERT INTO {} ({}) VALUES ({})'.format(
                self.TABLE_NAME,
                ', '.join(fields),
                ', '.join(['?'] * len(fields))
            )

        values = [self.record_type, self.record_timestamp, self.call_identifier]
        if self.record_type == constants.RECORD_TYPE_START:
            values.append(self.origin_number)
            values.append(self.destination_number)
        if self.record_id:
            values.append(self.record_id)

        res = cursor.execute(sql_command, values)
        db.commit()

        return res.rowcount > 0


def check_exists_id(cursor, table_name, id_field, id_value):
    """
    Check if there is some record on the table with the id.

    Args:
        cursor (): Cursor object from sqlite.
        table_name (str): Name of the table that will be used in the verification.
        if_field (str): Name of the id field that will be used to check the value.
        id_value (int): Value of the id that will be searched on the id field of the table.

    Returns:
        True - id exists.
        False - id not exists.
    """
    sql_command = 'SELECT 1 FROM {} WHERE {} = {}'.format(table_name, id_field, id_value)
    result = cursor.execute(sql_command)

    return result.fetchone() is not None
